var VERSION = '<%= version %>'
var diceChain = [3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 30]

/**
 * Given a simple die expression, breaks it down to properties.
 *
 * example: 3d20 -> { quantity: 3, size: 20 }
 */
var parseDieExpression = function(expr) {
  var regex = /^(\d*)d(\d+)$/i;
  var match = regex.exec(expr)
  if (match === null) {
    throw `Invalid expression given: ${expr}, must be of form 'ndx', ie. 2d6`;
  }
  return {
    quantity: match[1] !== "" ? match[1] : 1,
    size: match[2]
  };
}

/**
 * Generates a function to modify the dice chain. See `diceChainLower` as
 * an example of using it.
 */
var diceChainModifier = function(limit_number, direction_counter) {
  return function(size) {
    var isString = typeof size == 'string';
    if (isString) {
      size = parseInt(/^d(\d+)$/i.exec(size)[1], 10);
    }
    if (size == limit_number) {
      return isString ? `d${size}` : size ;
    }
    index = diceChain.indexOf(size);
    if (index < 0) {
      throw `Invalid die size given: ${size}, must be one of ${diceChain}`;
    }
    var result = diceChain[index + direction_counter]
    return isString ? `d${result}` : result ;
  };
};

/**
 * Takes a given die size (ie: 6 for d6) and returns the size of the die
 * that is one step lower on the dice chain.
 *
 * size can optionally be prefixed with "d", in which case the return
 * value is also "dX"
 *
 * example: diceChainLower(20) -> 16
 * example: diceChainLower("d20") -> "d16"
 */
var diceChainLower = diceChainModifier(3, -1);

/**
 * Takes a given die size (ie: 6 for d6) and returns the size of the die
 * that is one step higher on the dice chain.
 *
 * size can optionally be prefixed with "d"
 *
 * example: diceChainHigher(20) -> 24
 * example: diceChainHigher("d20") -> "d24"
 */
var diceChainHigher = diceChainModifier(30, +1);

/**
 * Responsible for checking whether sheet values need to be recalculated
 */
var recalculateSheet = function() {
  const defaultVersion = '1.5.0';
  getAttrs(["_charsheetVersion"], function(values) {
    var version = values._charsheetVersion || defaultVersion;
    if (version != VERSION) {
      runMigrations(version);
    }
//    setAttrs({ _charsheetVersion: VERSION });
  });
};

on("sheet:opened", function() {
  validateAttrMods();
  recalculateSheet();
});

on("<%= abilities_attribute_names.flat_map{|ability| ["change:#{ability}", "change:repeating_level0s:#{level0multi_namespace}#{ability}"] }.join(" ")%>", function(e) {
  var attr = e.sourceAttribute;
  calculateMod([attr]);
});

/**
 * Sets ability max score if it hasn't been set yet
 */
on("<%= abilities_attribute_names.flat_map{|ability| ["change:#{ability}", "change:repeating_level0s:#{level0multi_namespace}#{ability}"] }.join(" ")%>", function(e) {
  var attr = e.sourceAttribute;
  var max = `${attr}Max`;
  getAttrs([max], function(values) {
    if (!values[max]) {
      var newMax = {};
      newMax[max] = e.newValue;
      setAttrs(newMax);
    }
  });
});

/**
 * Sets weapon backstab damage if it hasn't been set yet, after damage is changed
 *
 * Level0 weapons don't have backstab button so we don't need to worry about those
 */
<%= autoupdate_attribute(source: "meleedmg", dest: "meleebackstabdmg", repeating_section: "meleeweapon") %>
<%= autoupdate_attribute(source: "rangeddmg", dest: "rangedbackstabdmg", repeating_section: "rangedweapon") %>

calculateAbilityScore = function calculateAbilityScore(value) {
  var mod;
  if (value >= 24) {
    mod = 6;
  } else if (value >= 22 && value <= 23) {
    mod = 5;
  } else if (value >= 20 && value <= 21) {
    mod = 4;
  } else if (value >= 18 && value <= 19) {
    mod = 3;
  } else if (value >= 16 && value <= 17) {
    mod = 2;
  } else if (value >= 13 && value <= 15) {
    mod = 1;
  } else if (value >= 6 && value <= 8) {
    mod = -1;
  } else if (value >= 4 && value <= 5) {
    mod = -2;
  } else if (value <= 3) {
    mod = -3;
  } else {
    mod = 0
  }
  return mod;
};

calculateMod = function(attributes) {
  // TODO optimise this to make one call to getAttrs/setAttrs
  attributes.map(function(attr) {
    getAttrs([attr], function(v) {
      var attrModName = attr + 'Mod';
      var updatedVal  = {
        [attrModName]: calculateAbilityScore(v[attr])
      };
      setAttrs(updatedVal);
    });
  });
}

validateAttrMods = function() {
  calculateMod(['str', 'int', 'agi', 'per', 'sta', 'luck', 'luckStarting']);
}

/**
 * Set overall init mod for the multi-level0 init button
 */
on("change:repeating_level0s:<%= level0multi_namespace %>agi change:repeating_level0s:<%= level0multi_namespace %>initluckyroll change:repeating_levels0:<%= level0multi_namespace %>luckstartingmod", function(e) {

  TAS.repeating("level0s")
    .attrs("level0MultiInit")
    .fields("<%= level0multi_namespace %>agiMod", "<%= level0multi_namespace %>initLuckyRoll", "<%= level0multi_namespace %>luckStartingMod")
    .map(function(row, attrSet, id, rowSet) {
      var initMod = row.I.<%= level0multi_namespace %>agiMod;
      /* when initLuckyRoll is set, we get back a formula, ie: '[[@{luckStartingMod}]]', when it's not set, we get back "0" */
      if (isNaN(parseInt(row.<%= level0multi_namespace %>initLuckyRoll))) {
        // initLuckyRoll is set
        initMod += row.I.<%= level0multi_namespace %>luckStartingMod;
      }
      return initMod;
    }, function(results, rowSet, attrSet) {
      if (_.isEmpty(results)) {
        attrSet.I.level0MultiInit = 0;
      } else {
        attrSet.I.level0MultiInit = _.max(results);
      }
    }).execute();
});


on("sheet:opened change:repeating_armor:armorcheck change:repeating_armor:armoracbase change:repeating_armor:armormagicbonus change:repeating_armor:armorspeed change:repeating_armor:armoractive remove:repeating_armor change:agimod change:armorclassluckyroll change:luckstartingmod", function(e) {

  getAttrs(["acCalc", "armorCheck", "armorSpeed", "agiMod", "armorClassLuckyRoll" , "luckStartingMod"], function(values) {
    const baseAc = 10;
    const agiAc = values.agiMod ? parseInt(values.agiMod) : 0;
    const checkLuckyAc = isNaN(parseInt(values.armorClassLuckyRoll)); // returns a formula if set, let's check for its presence
    const luckyAc = (values.luckStartingMod && checkLuckyAc) ? parseInt(values.luckStartingMod) : 0;
    const startAc = baseAc + agiAc + luckyAc;
    setAttrs({
      acCalc: startAc,
      armorCheck: 0,
      armorSpeed: 0
    });
  });

  TAS.repeating("armor")
    .attrs("acCalc", "armorCheck", "armorSpeed", "agiMod", "armorClassLuckyRoll")
    .fields("armorAcBase","armorMagicBonus","armorCheck","armorSpeed","armorActive")
    .map(function(row, attrSet, id, rowSet) {
      const check = parseInt(row.armorCheck) || 0;
      const speed = parseInt(row.armorSpeed) || 0;
      const acBase = parseInt(row.armorAcBase) || 0;
      const acBonus = parseInt(row.armorMagicBonus) || 0;
      if (row.armorActive === 'on') {
        attrSet.acCalc += acBase + acBonus;
        attrSet.armorCheck += check;
        attrSet.armorSpeed += speed;
      }
    })
    .execute();
});

<% %w[1 2 3 4 5 6 7 99 lankhmar].each do |index| %>
  on("clicked:tab<%= index %>", function() {
    setAttrs({
      tab: "<%= index %>"
    });
  });
<% end %>

// globalToggles is required so that we can call these functions from other
// events (namely: migrations)
var globalToggles = {}
<% DccData::Classes::ALL.each do |class_name| %>
  var toggle_<%= class_name %> = function(newValue) {
    if (newValue == "1") {
      setAttrs({
        <%= DccTabbedSheet::AbilityToggles::send(class_name).map{|option, desc| "options_#{option}: 1"}.join(", ") %>
      });
    } else {
      setAttrs({
        <%= DccTabbedSheet::AbilityToggles::send(class_name).map{|option, desc| "options_#{option}: 0"}.join(", ") %>
      });
    }
  };
  globalToggles["<%= class_name %>"] = toggle_<%= class_name %>;
  on("change:options_is_<%= class_name %>", (event) => {
    toggle_<%= class_name %>(event.newValue);
  });

  $20(".sheet-abilities-toggle-<%= class_name %>").on("click", (event) => {
    $20(".sheet-abilities-<%= class_name %>").toggleClass("sheet-hidden");
    $20(".sheet-abilities-toggle-<%= class_name %>").toggleClass("sheet-abilities-toggle-closed");
    $20(".sheet-abilities-toggle-<%= class_name %>").toggleClass("sheet-abilities-toggle-open");
  });
<% end %>

<%= render "sheet_workers/ranged_weapon_modifiers", formats: [:js] %>
<%= render "sheet_workers/import_from_other_sheet", formats: [:js] %>
<%= render "sheet_workers/semver_compare", formats: [:js] %>
<%= render "sheet_workers/migrations", formats: [:js] %>
