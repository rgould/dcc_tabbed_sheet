/**
 * Runs all migrations that are equal to or later than the given version
 *
 * `version` must be a semantic version (ie. "1.5.1") that exists on the `MIGRATIONS` object
 */
var runMigrations = function(version) {
  console.log(`[DCC_Tabbed_Sheet-Migrations] Checking if new migrations need to be run. Char sheet current version: ${version}, new version: ${VERSION}`);
  var foundNewMigration = false;
  _.each(MIGRATIONS, function(migrationRow) {
    var key = _.first(_.keys(migrationRow));
    if (compareVersionNumbers(version, key) < 0) {
      //Found new migration, need to run all migrations on this row
      foundNewMigration = true;
      console.log(`[DCC_Tabbed_Sheet-Migrations] New migrations found for ${key}, running them now...`);
    }
    if (foundNewMigration) {
      _.each(migrationRow[key], function(migration) {
        console.log(`[DCC_Tabbed_Sheet-Migrations] Running ${migration.name}...`);
        migration();
        console.log(`[DCC_Tabbed_Sheet-Migrations] ${migration.name} done.`);
      });
    }
  });
  if (foundNewMigration) {
    console.log("[DCC_Tabbed_Sheet-Migrations] Finished. Char sheet is up to date.");
  } else {
    console.log("[DCC_Tabbed_Sheet-Migrations] Finished. No new migrations.");
  }
};

/**
 * Copies the old zero level weapon data to normal weapon data rows
 */
var migrateZeroLevelWeapons = function migrateZeroLevelWeapons() {
  getAttrs(["Level"], function(values) {
    if (values.Level !== "0") {
      // We assume that anyone leveled to 1 has copied their 0-level weapons already
      return;
    }
    var l0Tol1Map = {
      "zeroWeaponLuckyRoll": "zeroWeaponLuckyRoll",
      "meleeWeaponNameZero": "meleeWeaponName",
      "meleeAttackDiceZero": "meleeAttackDice",
      "meleeAttackWieldedZero": "meleeAttackWielded",
      "meleeCritThreatZero": "meleeCritThreat",
      "meleeMagicZero": "meleeMagic",
      "meleeDmgZero": "meleeDmg",
      "zeroRangedWeaponLuckyRollZero": "zeroRangedWeaponLuckyRoll",
      "rangedAmmoZero": "rangedAmmo",
      "rangedWeaponNameZero": "rangedWeaponName",
      "rangedDistanceShortZero": "rangedDistanceShort",
      "rangedDistanceMedZero": "rangedDistanceMed",
      "rangedDistanceLongZero": "rangedDistanceLong",
      "rangedWeaponTypeZero": "rangedWeaponType",
      "rangedAttackDiceZero": "rangedAttackDice",
      "rangedDmgZero": "rangedDmg",
      "rangedCritThreatZero": "rangedCritThreat",
      "rangedMagicZero": "rangedMagic",
      "attackRangeZero": "attackRange"
    };
    var migrate = function(repeatingKey) {
      TAS
        .repeating(`${repeatingKey}zero`)
        .fields(_.keys(l0Tol1Map))
        .each(function(row, attrSet, id, rowSet) {
          var newRecord = {};
          var newId = generateRowID();
          var prefix = `repeating_${repeatingKey}_${newId}_`;
          _.each(l0Tol1Map, function(keyL1, keyL0) {
            var value = row[keyL0];
            if (value) {
              // Hack necessary due to case sensitive difference in values (luckstartingMod vs luckStartingMod)
              if (keyL0 === "zeroRangedWeaponLuckyRollZero" && value === "@{luckstartingMod}") {
                value = "@{luckStartingMod}";
              }
              newRecord[`${prefix}${keyL1}`] = value;
            }
          });
          setAttrs(newRecord, function() {
            removeRepeatingRow(`repeating_${repeatingKey}zero_${id}`);
          });
        })
        .execute();
    };
    migrate("meleeweapon");
    migrate("rangedweapon");
  });
};

var migrateLuckyRollValues = function migrateLuckyRollValues() {
  var attrsWithValuesRemapped = [
    "findSecretDoorsLuckyRoll",
    "spellCastLuckyRoll",
    "critLuckyRoll",
    "corruptionLuckyRoll",
    "fumbleLuckyRoll",
    "speedLuckyRoll",
    "armorClassLuckyRoll"
  ];
  getAttrs(attrsWithValuesRemapped, function(attrs) {
    var newValues = _.reduce(attrsWithValuesRemapped, function(memo, attr_name) {
      if (isNaN(parseInt(attrs[attr_name]))) {
        memo[attr_name] = "[[@{luckStartingMod}]]";
      }
      return memo;
    }, {});
    setAttrs(newValues);
  });
};

// keys = src, values = dest
var mergeAttrs = function mergeAttrs(attrsMap, callback) {
  getAttrs(_.keys(attrsMap).concat(_.values(attrsMap)), function(attrs) {
    var mergedAttrs = _.reduce(attrsMap, function(memo, wizardAttr, elfAttr) {
      if (attrs[elfAttr]) {
        memo[wizardAttr] = attrs[wizardAttr] ? `${attrs[wizardAttr]} ${attrs[elfAttr]}`.trim() : attrs[elfAttr];
      }
      return memo;
    }, {});
    setAttrs(mergedAttrs, callback);
  });
};

var migrateDeduplicatedAttributes = function migrateDeduplicatedAttributes() {
  /* Merge "Elf" attributes into Wizard first, then we'll merge "ElfRogue" attributes.
     Doing them simultaneously is kinda ugly */
  var attrNamesToMerge = {
    "elfFamiliarCheck": "wizardFamiliarCheck",
    "elfFamiliarName": "wizardFamiliarName",
    "ElfFamiliar": "WizardFamiliar",
    "elfFamiliarLook": "wizardFamiliarLook",
    "elfFamiliarPersonality": "wizardFamiliarPersonality",
    "elfFamiliarBenefit": "wizardFamiliarBenefit",
    "ElfPatron": "WizardPatron",
    "elfPatronTaint": "wizardPatronTaint",
    "ElfPatronBondNotes": "wizardPatronBondNotes",
    "ElfCorruption": "WizardCorruption",
    "dwarfPriestAlignSame": "clericAlignSame",
    "dwarfPriestAlignAdjacent": "clericAlignAdjacent",
    "dwarfPriestAlignOpposed": "clericAlignOpposed",
  };
  mergeAttrs(attrNamesToMerge, function() {
    // Merge ElfRogue attributes similarly to above
    var elfRogueAttrNames = {
      "elfRogueFamiliarCheck": "wizardFamiliarCheck",
      "elfRogueFamiliarName": "wizardFamiliarName",
      "elfRogueFamiliar": "WizardFamiliar",
      "elfRogueFamiliarLook": "wizardFamiliarLook",
      "elfRogueFamiliarPersonality": "wizardFamiliarPersonality",
      "elfRogueFamiliarBenefit": "wizardFamiliarBenefit",
      "elfRoguePatron": "WizardPatron",
      "elfRoguePatronTaint": "wizardPatronTaint",
      "elfRoguePatronBondNotes": "wizardPatronBondNotes",
      "elfRogueCorruption": "WizardCorruption"
    };
    mergeAttrs(elfRogueAttrNames);
  });

  var skills = ["Sneak"];
  var attrNamesToOverwrite = {
    "halflingChampStealthCheckMisc": "halflingStealthCheckMisc",
    "halflingChampHideCheckMisc": "halflingHideCheckMisc",
    "dwarfPriestTurnUnholyCheckMisc": "TurnUnholyCheckMisc",
    "dwarfPriestTurnUnholyNotes": "TurnUnholyNotes",
    "dwarfPriestDivineAidCheckMisc": "DivineAidCheckMisc",
    "dwarfPriestDivineAidNotes": "DivineAidNotes",
    "dwarfPriestLayOnHandsCheckMisc": "LayOnHandsCheckMisc",
    "dwarfPriestLayOnHandsNotes": "LayOnHandsNotes",
    <%= %w(Sneak Hide PickPockets Climb PickLocks FindTraps DisableTraps ForgeDocuments Disguise Read Poison).map{|a| "\"elfRogue#{a}\": \"Thief#{a}\"," }.join("\n").html_safe %>
    <%= %w(Sneak Hide PickPockets Climb PickLocks FindTraps DisableTraps ForgeDocuments Disguise Read Poison).map{|a| "\"elfRogue#{a}CheckMisc\": \"thief#{a}CheckMisc\"," }.join("\n").html_safe %>
  };
  getAttrs(_.keys(attrNamesToOverwrite).concat(_.values(attrNamesToOverwrite)), function(attrs) {
    var newAttrs = _.reduce(attrNamesToOverwrite, function(memo, destAttr, srcAttr) {
      if (attrs[srcAttr] && attrs[srcAttr] !== '0') {
        memo[destAttr] = attrs[srcAttr];
      }
      return memo;
    }, {});
    setAttrs(newAttrs);
  });

  // Copy all old class "notes" to one attribute
  var notesAttrs = [
    "ElfNotes",
    "WizardNotes",
    "bardNotes",
    "clericNotes",
    "cyborgNotes",
    "dwarfNotes",
    "dwarfPriestNotes",
    "elfRogueNotes",
    "gnomeNotes",
    "halflingChampionNotes",
    "halflingNotes",
    "kithNotes",
    "mutantNotes",
    "paladinNotes",
    "petrolHeadNotes",
    "rangerNotes",
    "technologistNotes",
    "thiefNotes",
    "warriorNotes"
  ];
  getAttrs(notesAttrs, function(attrs) {
    var newNotes = notesAttrs.map(attr => attrs[attr]).filter(n => n).join("\n");
    setAttrs({classNotes: newNotes});
  });

  // Copy all old corruptions to one attribute
  var corruptionAttrs = [
    "WizardCorruption",
    "gnomeCorruption",
    "bardCorruption"
  ];
  getAttrs(corruptionAttrs, function(attrs) {
    var newCorruptions = corruptionAttrs.map(attr => attrs[attr]).filter(n => n).join("\n");
    setAttrs({WizardCorruption: newCorruptions});
  });

};

var migrateClassSelector = function migrateClassSelector() {
  var classKeyToNameMap = {
    "1": "warrior",
    "2": "wizard",
    "3": "cleric",
    "4": "thief",
    "5": "halfling",
    "6": "dwarf",
    "7": "elf",
    "8": "bard",
    "9": "gnome",
    "10": "paladin",
    "11": "ranger",
    "12": "dwarf_priest",
    "13": "elf_rogue",
    "14": "halfling_champion",
    "15": "cyborg",
    "16": "mutant",
    "17": "petrol_head",
    "18": "technologist",
    "19": "halfling_burglar"
  };
  getAttrs(["Class"], function(attrs) {
    var klass = attrs["Class"];
    if (!klass) {
      klass = "1"; // class was never explicitly chosen, meaning it defaulted to a warrior
    }
    var className = classKeyToNameMap[klass];
    var newAttrs = {
      [`options_is_${className}`]: "1"
    };
    setAttrs(newAttrs, function() {
      globalToggles[className]("1");
    });
  });
};

var MIGRATIONS = [
  { "1.5.0": [] },
  { "1.5.1": [recalculateAllRangedModifiers, migrateZeroLevelWeapons] },
  { "1.5.2": [] },
  { "1.6.0": [migrateLuckyRollValues] },
  { "1.7.0": [migrateDeduplicatedAttributes, migrateClassSelector] },
];
